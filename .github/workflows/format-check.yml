name: Validation and Publish (if needed)

on:
  push:
    branches-ignore:
      - gh-pages
  pull_request:
    branches:
      - master

jobs:
  cache-dependencies:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Setup PNPM 
        # You may pin to the exact commit or the version.
        # uses: pnpm/action-setup@935101478d12d633ea2e71bb8b63d18e00bda099
        uses: pnpm/action-setup@v1.2.0
        with:
          version: 5.9.3
          # Where to store PNPM files
          dest: ~/.pnpm-store
          # Where to store executables (pnpm and pnpx commands)
          bin_dest: ~/.pnpm-store/bin 
          
      - name: Cache node modules
        uses: actions/cache@v2
        env:
          cache-name: cache-node-modules
        with:
          # pnpm cache files are stored in `~/.pnpm-store` on Linux/macOS
          path: ~/.pnpm-store
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/pnpm-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-
       
      - name: Install Dependencies
        run: pnpm install

  lint-check:
    runs-on: ubuntu-latest
    needs: [cache-dependencies]
    steps:
      - uses: actions/checkout@v2
        
      - name: Cache node modules
        uses: actions/cache@v2
        env:
          cache-name: cache-node-modules
        with:
          # pnpm cache files are stored in `~/.pnpm-store` on Linux/macOS
          path: ~/.pnpm-store
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/pnpm-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-
      
      - name: Setup PNPM / Install Dependencies
        # You may pin to the exact commit or the version.
        # uses: pnpm/action-setup@935101478d12d633ea2e71bb8b63d18e00bda099
        uses: pnpm/action-setup@v1.2.0
        with:
          version: 5.9.3
          # Where to store PNPM files
          dest: ~/.pnpm-store
          # Where to store executables (pnpm and pnpx commands)
          bin_dest: ~/.pnpm-store/bin
      
      - name: eslint dep
        run: pnpm add -D eslint-config-google eslint-config-prettier
      
      - name: lint check
        run: pnpx eslint index.js lib
  prettier-check:
    runs-on: ubuntu-latest
    needs: [cache-dependencies]
    steps:
      - uses: actions/checkout@v2

      - name: Cache node modules
        uses: actions/cache@v2
        env:
          cache-name: cache-node-modules
        with:
          # pnpm cache files are stored in `~/.pnpm-store` on Linux/macOS
          path: ~/.pnpm-store
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/pnpm-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-

      - name: Setup PNPM / Install Dependencies
        # You may pin to the exact commit or the version.
        # uses: pnpm/action-setup@935101478d12d633ea2e71bb8b63d18e00bda099
        uses: pnpm/action-setup@v1.2.0
        with:
          version: 5.9.3
          # Where to store PNPM files
          dest: ~/.pnpm-store
          # Where to store executables (pnpm and pnpx commands)
          bin_dest: ~/.pnpm-store/bin
          
      - name: check script
        run: pnpx prettier -c index.js README.md docs lib
  publish:
    runs-on: ubuntu-latest
    needs: [lint-check, prettier-check]
    steps:
    - name: Checkout
      uses: actions/checkout@v2
      with:
        persist-credentials: false

    - name: Semantic Release
      id: semantic
      uses: cycjimmy/semantic-release-action@v2
      with:
        # You can specify specifying version range for the extra plugins if you prefer.
        extra_plugins: |
          @semantic-release/changelog
          @semantic-release/git
      env:
        GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
        NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
    
    - name: Do something when a new release published
      if: steps.semantic.outputs.new_release_published == 'true'
      run: |
        echo ${{ steps.semantic.outputs.new_release_version }}
        echo ${{ steps.semantic.outputs.new_release_major_version }}
        echo ${{ steps.semantic.outputs.new_release_minor_version }}
        echo ${{ steps.semantic.outputs.new_release_patch_version }}
