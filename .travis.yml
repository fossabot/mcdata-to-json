language: node_js
stages:
  - Test
  - name: Publish
    if: branch = master
jobs:
  include:
    - stage: Test
      node_js:
        - lts/*
      cache:
        npm: false
        directories:
          - "~/.pnpm-store"
      before_install:
        - curl -L https://unpkg.com/@pnpm/self-installer | node
        - pnpm config set store-dir ~/.pnpm-store
      install:
        - pnpm install
      before_script:
        - pnpm check-lint
        - pnpm check-pretty
      script:
        - pnpm test
    - stage: Publish
      node_js: lts/*
      cache:
        npm: false
        directories:
          - "~/.pnpm-store"
      before_install:
        # Decrypt the git_gpg_keys.asc.enc key into /tmp/git_gpg_keys.asc
        - openssl aes-256-cbc -K $encrypted_44fd1061a48b_key -iv $encrypted_44fd1061a48b_iv -in git_gpg_keys.asc.enc -out /tmp/git_gpg_keys.asc -d
        # Make sure only the current user can read the keys
        - chmod 600 /tmp/git_gpg_keys.asc
        # Import the gpg key
        - gpg --batch --yes --import /tmp/git_gpg_keys.asc
        # Create a script that pass the passphrase to the gpg CLI called by git
        - echo '/usr/bin/gpg2 --passphrase ${GPG_PASSPHRASE} --batch --no-tty "$@"' > /tmp/gpg-with-passphrase && chmod +x /tmp/gpg-with-passphrase
        # Configure git to use the script that passes the passphrase
        - git config gpg.program "/tmp/gpg-with-passphrase"
        # Configure git to sign the commits and tags
        - git config commit.gpgsign true
        # Configure git to use your GPG key
        - git config --global user.signingkey ${GPG_KEY_ID}
        - curl -L https://unpkg.com/@pnpm/self-installer | node
        - pnpm config set store-dir ~/.pnpm-store
      install:
        - pnpm install
      script: skip
      deploy:
        provider: script
        skip_cleanup: true
        script:
          - pnpx semantic-release
